#!/bin/bash

# ============================================================================
# CLI Demo - Sistema Trading Bitcoin com Ollama LLM
# ============================================================================
# Script de demonstra√ß√£o das funcionalidades da CLI
# ============================================================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m'

demo_header() {
    echo -e "${PURPLE}============================================${NC}"
    echo -e "${PURPLE}$1${NC}"
    echo -e "${PURPLE}============================================${NC}"
    echo ""
}

demo_step() {
    echo -e "${CYAN}üìã $1${NC}"
    echo -e "${YELLOW}Comando: $2${NC}"
    echo ""
}

wait_for_user() {
    echo -e "${BLUE}Pressione Enter para continuar...${NC}"
    read
    echo ""
}

run_command() {
    echo -e "${GREEN}$ $1${NC}"
    eval "$1"
    echo ""
}

main() {
    clear
    
    demo_header "üöÄ DEMONSTRA√á√ÉO DA CLI - SISTEMA TRADING BITCOIN"
    
    echo "Esta demonstra√ß√£o mostra as principais funcionalidades da"
    echo "interface de linha de comando do sistema de trading Bitcoin."
    echo ""
    wait_for_user
    
    # 1. Verificar status do sistema
    demo_header "1. VERIFICA√á√ÉO DO STATUS DO SISTEMA"
    demo_step "Verificar se todos os componentes est√£o funcionando" "python ../src/cli/btc_trading_cli.py system status"
    run_command "python ../src/cli/btc_trading_cli.py system status"
    wait_for_user
    
    # 2. Configura√ß√£o
    demo_header "2. GERENCIAMENTO DE CONFIGURA√á√ÉO"
    demo_step "Visualizar configura√ß√£o atual" "python ../src/cli/btc_trading_cli.py config show"
    run_command "python ../src/cli/btc_trading_cli.py config show"
    
    echo -e "${CYAN}üìã Definir um par√¢metro de configura√ß√£o${NC}"
    echo -e "${YELLOW}Comando: python ../src/cli/btc_trading_cli.py config set min_confidence 0.75${NC}"
    echo ""
    run_command "python ../src/cli/btc_trading_cli.py config set min_confidence 0.75"
    
    echo -e "${CYAN}üìã Verificar valor espec√≠fico${NC}"
    echo -e "${YELLOW}Comando: python ../src/cli/btc_trading_cli.py config get min_confidence${NC}"
    echo ""
    run_command "python ../src/cli/btc_trading_cli.py config get min_confidence"
    wait_for_user
    
    # 3. An√°lise de sentimento individual
    demo_header "3. AN√ÅLISE DE SENTIMENTO INDIVIDUAL"
    demo_step "Analisar sentimento de um texto simples" "python ../src/cli/btc_trading_cli.py sentiment analyze 'Bitcoin is going to the moon!'"
    run_command "python ../src/cli/btc_trading_cli.py sentiment analyze 'Bitcoin is going to the moon!'"
    
    demo_step "An√°lise com output em JSON" "python ../src/cli/btc_trading_cli.py sentiment analyze 'Bitcoin is crashing!' --output json"
    run_command "python ../src/cli/btc_trading_cli.py sentiment analyze 'Bitcoin is crashing!' --output json"
    
    demo_step "An√°lise com modelo espec√≠fico" "python ../src/cli/btc_trading_cli.py sentiment analyze 'Bitcoin price is stable' --model llama3.2:1b --output table"
    run_command "python ../src/cli/btc_trading_cli.py sentiment analyze 'Bitcoin price is stable' --model llama3.2:1b --output table"
    wait_for_user
    
    # 4. An√°lise em lote
    demo_header "4. AN√ÅLISE DE SENTIMENTO EM LOTE"
    
    echo -e "${CYAN}üìã Criar arquivo de teste com m√∫ltiplos textos${NC}"
    echo ""
    
    cat > /tmp/test_texts.txt << 'EOF'
Bitcoin is showing incredible bullish momentum today!
The crypto market is experiencing a major downturn.
BTC price remains stable around current levels.
HODL! Diamond hands! To the moon!
This Bitcoin dump is terrible, selling everything.
Institutional adoption of Bitcoin is accelerating.
Market sentiment is very bearish right now.
Bitcoin breaking through resistance levels.
EOF
    
    echo "Arquivo criado: /tmp/test_texts.txt"
    echo "Conte√∫do:"
    cat /tmp/test_texts.txt
    echo ""
    
    demo_step "An√°lise em lote com output JSON" "python ../src/cli/btc_trading_cli.py sentiment batch /tmp/test_texts.txt --format json"
    run_command "python ../src/cli/btc_trading_cli.py sentiment batch /tmp/test_texts.txt --format json --output /tmp/batch_results.json"
    
    echo "Resultados salvos em: /tmp/batch_results.json"
    echo "Primeiros resultados:"
    head -20 /tmp/batch_results.json
    echo ""
    wait_for_user
    
    # 5. Backtest
    demo_header "5. BACKTEST DO SISTEMA DE TRADING"
    demo_step "Executar backtest r√°pido (3 dias)" "python ../src/cli/btc_trading_cli.py trading backtest --days 3 --capital 5000"
    run_command "python ../src/cli/btc_trading_cli.py trading backtest --days 3 --capital 5000"
    
    demo_step "Backtest com output para arquivo" "python ../src/cli/btc_trading_cli.py trading backtest --days 5 --capital 10000 --output /tmp/backtest_results.json"
    run_command "python ../src/cli/btc_trading_cli.py trading backtest --days 5 --capital 10000 --output /tmp/backtest_results.json"
    
    echo "Resultados do backtest:"
    cat /tmp/backtest_results.json | jq '.results'
    echo ""
    wait_for_user
    
    # 6. Benchmark de modelos
    demo_header "6. BENCHMARK DE MODELOS"
    demo_step "Comparar performance de diferentes modelos" "python ../src/cli/btc_trading_cli.py benchmark models --models llama3.2:1b"
    
    echo -e "${YELLOW}Nota: Este teste pode demorar alguns minutos...${NC}"
    echo ""
    run_command "python ../src/cli/btc_trading_cli.py benchmark models --models llama3.2:1b --output /tmp/benchmark_results.json"
    
    echo "Resultados do benchmark:"
    cat /tmp/benchmark_results.json | jq '.results'
    echo ""
    wait_for_user
    
    # 7. Monitoramento
    demo_header "7. MONITORAMENTO E LOGS"
    demo_step "Visualizar m√©tricas do sistema" "python ../src/cli/btc_trading_cli.py system metrics"
    run_command "python ../src/cli/btc_trading_cli.py system metrics"
    
    demo_step "Visualizar logs recentes" "python ../src/cli/btc_trading_cli.py system logs --lines 10"
    run_command "python ../src/cli/btc_trading_cli.py system logs --lines 10"
    wait_for_user
    
    # 8. Funcionalidades avan√ßadas
    demo_header "8. FUNCIONALIDADES AVAN√áADAS"
    
    echo -e "${CYAN}üìã Usando aliases (se configurados)${NC}"
    echo -e "${YELLOW}btc-status    # Equivale a: python ../src/cli/btc_trading_cli.py system status${NC}"
    echo -e "${YELLOW}btc-analyze   # Equivale a: python ../src/cli/btc_trading_cli.py sentiment analyze${NC}"
    echo -e "${YELLOW}btc-config    # Equivale a: python ../src/cli/btc_trading_cli.py config show${NC}"
    echo ""
    
    echo -e "${CYAN}üìã Auto-completar (pressione Tab ap√≥s digitar)${NC}"
    echo -e "${YELLOW}python ../src/cli/btc_trading_cli.py sen<TAB>     # Completa para 'sentiment'${NC}"
    echo -e "${YELLOW}python ../src/cli/btc_trading_cli.py config <TAB> # Mostra: show, set, get, reset${NC}"
    echo ""
    
    echo -e "${CYAN}üìã Ajuda contextual${NC}"
    echo -e "${YELLOW}python ../src/cli/btc_trading_cli.py --help                    # Ajuda geral${NC}"
    echo -e "${YELLOW}python ../src/cli/btc_trading_cli.py sentiment --help          # Ajuda do m√≥dulo${NC}"
    echo -e "${YELLOW}python ../src/cli/btc_trading_cli.py sentiment analyze --help  # Ajuda do comando${NC}"
    echo ""
    wait_for_user
    
    # 9. Exemplos pr√°ticos
    demo_header "9. EXEMPLOS PR√ÅTICOS DE USO"
    
    echo -e "${CYAN}üìã An√°lise r√°pida de not√≠cia${NC}"
    echo -e "${YELLOW}python ../src/cli/btc_trading_cli.py sentiment analyze 'Tesla announces Bitcoin payment integration' --output table${NC}"
    echo ""
    run_command "python ../src/cli/btc_trading_cli.py sentiment analyze 'Tesla announces Bitcoin payment integration' --output table"
    
    echo -e "${CYAN}üìã Monitoramento cont√≠nuo (simulado)${NC}"
    echo -e "${YELLOW}# Em produ√ß√£o, voc√™ usaria:${NC}"
    echo -e "${YELLOW}# watch -n 60 'python ../src/cli/btc_trading_cli.py system status'${NC}"
    echo ""
    
    echo -e "${CYAN}üìã Pipeline de an√°lise${NC}"
    echo -e "${YELLOW}# Coletar dados -> Analisar -> Gerar relat√≥rio${NC}"
    echo ""
    
    cat > /tmp/pipeline_demo.sh << 'EOF'
#!/bin/bash
# Pipeline de an√°lise automatizada

echo "üìä Coletando dados de sentimento..."
echo "Bitcoin adoption is growing rapidly" > /tmp/market_data.txt
echo "Crypto market showing strong bullish signals" >> /tmp/market_data.txt
echo "Institutional investors buying Bitcoin" >> /tmp/market_data.txt

echo "üß† Analisando sentimento..."
python ../src/cli/btc_trading_cli.py sentiment batch /tmp/market_data.txt --format json --output /tmp/analysis.json

echo "üìà Gerando relat√≥rio..."
echo "An√°lise de Sentimento - $(date)" > /tmp/report.txt
echo "=================================" >> /tmp/report.txt
jq -r '.[] | "\(.sentiment | ascii_upcase): \(.text) (Score: \(.score | tostring))"' /tmp/analysis.json >> /tmp/report.txt

echo "‚úÖ Relat√≥rio gerado: /tmp/report.txt"
cat /tmp/report.txt
EOF
    
    chmod +x /tmp/pipeline_demo.sh
    run_command "/tmp/pipeline_demo.sh"
    wait_for_user
    
    # 10. Finaliza√ß√£o
    demo_header "10. RECURSOS ADICIONAIS"
    
    echo -e "${GREEN}üìö Documenta√ß√£o e Ajuda:${NC}"
    echo "  ‚Ä¢ man python ../src/cli/btc_trading_cli.py              # Manual completo"
    echo "  ‚Ä¢ python ../src/cli/btc_trading_cli.py --help           # Ajuda da CLI"
    echo "  ‚Ä¢ python ../src/cli/btc_trading_cli.py <comando> --help # Ajuda espec√≠fica"
    echo ""
    
    echo -e "${GREEN}üîß Configura√ß√£o Avan√ßada:${NC}"
    echo "  ‚Ä¢ ~/.python ../src/cli/btc_trading_cli.py/config.json   # Configura√ß√£o pessoal"
    echo "  ‚Ä¢ ~/.python ../src/cli/btc_trading_cli.py/logs/         # Logs do usu√°rio"
    echo ""
    
    echo -e "${GREEN}üöÄ Pr√≥ximos Passos:${NC}"
    echo "  1. Configure par√¢metros espec√≠ficos com 'python ../src/cli/btc_trading_cli.py config set'"
    echo "  2. Execute backtests com diferentes configura√ß√µes"
    echo "  3. Monitore performance com 'python ../src/cli/btc_trading_cli.py system metrics'"
    echo "  4. Use modo live para trading em tempo real (com cautela!)"
    echo ""
    
    echo -e "${GREEN}‚ö†Ô∏è  Importante:${NC}"
    echo "  ‚Ä¢ Sempre teste em modo simula√ß√£o antes do trading real"
    echo "  ‚Ä¢ Configure limites de risco apropriados"
    echo "  ‚Ä¢ Monitore logs e m√©tricas regularmente"
    echo "  ‚Ä¢ Mantenha backups da configura√ß√£o"
    echo ""
    
    demo_header "üéâ DEMONSTRA√á√ÉO CONCLU√çDA!"
    
    echo "A CLI do Sistema de Trading Bitcoin oferece uma interface"
    echo "poderosa e flex√≠vel para todas as opera√ß√µes do sistema."
    echo ""
    echo "Para come√ßar a usar:"
    echo "  python ../src/cli/btc_trading_cli.py system status"
    echo ""
    echo "Para ajuda completa:"
    echo "  python ../src/cli/btc_trading_cli.py --help"
    echo ""
    echo -e "${GREEN}Obrigado por usar o Sistema de Trading Bitcoin! üöÄ${NC}"
    echo ""
    
    # Limpeza
    echo "üßπ Limpando arquivos tempor√°rios da demonstra√ß√£o..."
    rm -f /tmp/test_texts.txt /tmp/batch_results.json /tmp/backtest_results.json
    rm -f /tmp/benchmark_results.json /tmp/market_data.txt /tmp/analysis.json
    rm -f /tmp/report.txt /tmp/pipeline_demo.sh
    echo "‚úÖ Limpeza conclu√≠da"
}

# Verificar se a CLI est√° instalada
if ! command -v python ../src/cli/btc_trading_cli.py &> /dev/null; then
    echo -e "${RED}‚ùå CLI n√£o encontrada${NC}"
    echo "Execute primeiro o script de configura√ß√£o: ./setup_cli.sh"
    exit 1
fi

# Verificar argumentos
if [[ "${1:-}" == "--help" ]] || [[ "${1:-}" == "-h" ]]; then
    echo "Uso: $0"
    echo ""
    echo "Executa demonstra√ß√£o interativa da CLI do sistema de trading Bitcoin."
    echo ""
    echo "Pr√©-requisitos:"
    echo "  ‚Ä¢ CLI instalada (python ../src/cli/btc_trading_cli.py dispon√≠vel no PATH)"
    echo "  ‚Ä¢ Sistema principal funcionando"
    echo "  ‚Ä¢ Ollama rodando com modelos instalados"
    exit 0
fi

# Executar demonstra√ß√£o
main


#!/usr/bin/env python3
"""
Bitcoin Trading System CLI - Interface de Linha de Comando
============================================================
Autor: Manus AI
Vers√£o: 1.0
Data: 31 de Julho de 2025

Interface unificada para gerenciar e operar o sistema de trading Bitcoin
com an√°lise de sentimento usando Ollama LLM.
"""

import click
import json
import sys
import os
import time
import asyncio
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional

# Adicionar diret√≥rio src ao path
sys.path.append(str(Path(__file__).parent.parent))

try:
    from ..sentiment.enhanced_sentiment_analyzer import EnhancedSentimentAnalyzer
    from ..trading.bitcoin_trading_system_with_ollama import BitcoinTradingSystemWithOllama
    from ..core.sentiment_benchmark import SentimentBenchmark
    from metrics_collector import metrics_collector
except ImportError as e:
    click.echo(f"‚ùå Erro importando m√≥dulos: {e}", err=True)
    click.echo("Certifique-se de que est√° no diret√≥rio correto e que o sistema est√° instalado.", err=True)
    sys.exit(1)

# Configura√ß√µes globais
CONFIG_DIR = Path.home() / '.btc-trading'
CONFIG_FILE = CONFIG_DIR / 'config.json'
LOG_DIR = CONFIG_DIR / 'logs'

# Criar diret√≥rios se n√£o existirem
CONFIG_DIR.mkdir(exist_ok=True)
LOG_DIR.mkdir(exist_ok=True)

class CLIConfig:
    """Gerenciador de configura√ß√£o da CLI"""
    
    def __init__(self):
        self.config_file = CONFIG_FILE
        self.default_config = {
            'ollama_model': 'llama3.2:1b',
            'min_confidence': 0.6,
            'position_size': 0.1,
            'initial_capital': 10000.0,
            'log_level': 'INFO',
            'cache_enabled': True,
            'auto_update': True
        }
    
    def load(self) -> Dict:
        """Carrega configura√ß√£o"""
        if self.config_file.exists():
            try:
                with open(self.config_file, 'r') as f:
                    config = json.load(f)
                # Mesclar com configura√ß√£o padr√£o
                merged_config = self.default_config.copy()
                merged_config.update(config)
                return merged_config
            except Exception as e:
                click.echo(f"‚ö†Ô∏è  Erro carregando configura√ß√£o: {e}", err=True)
        
        return self.default_config.copy()
    
    def save(self, config: Dict):
        """Salva configura√ß√£o"""
        try:
            with open(self.config_file, 'w') as f:
                json.dump(config, f, indent=2)
        except Exception as e:
            click.echo(f"‚ùå Erro salvando configura√ß√£o: {e}", err=True)

# Inst√¢ncia global de configura√ß√£o
cli_config = CLIConfig()

@click.group()
@click.version_option(version='1.0', prog_name='btc-trading')
@click.option('--config', '-c', help='Arquivo de configura√ß√£o personalizado')
@click.option('--verbose', '-v', is_flag=True, help='Sa√≠da detalhada')
@click.pass_context
def cli(ctx, config, verbose):
    """
    üöÄ Sistema de Trading Bitcoin com Ollama LLM
    
    Interface de linha de comando para gerenciar e operar o sistema
    de trading automatizado baseado em an√°lise de sentimento.
    """
    ctx.ensure_object(dict)
    ctx.obj['verbose'] = verbose
    ctx.obj['config'] = cli_config.load()
    
    if config:
        try:
            with open(config, 'r') as f:
                custom_config = json.load(f)
            ctx.obj['config'].update(custom_config)
        except Exception as e:
            click.echo(f"‚ùå Erro carregando configura√ß√£o personalizada: {e}", err=True)
            sys.exit(1)

@cli.group()
def sentiment():
    """Comandos para an√°lise de sentimento"""
    pass

@sentiment.command()
@click.argument('text')
@click.option('--model', '-m', help='Modelo Ollama a usar')
@click.option('--output', '-o', type=click.Choice(['json', 'table', 'simple']), default='simple')
@click.pass_context
def analyze(ctx, text, model, output):
    """Analisa sentimento de um texto"""
    config = ctx.obj['config']
    model = model or config['ollama_model']
    
    try:
        with click.progressbar(length=1, label='Analisando sentimento') as bar:
            analyzer = EnhancedSentimentAnalyzer(ollama_model=model)
            result = analyzer.analyze_sentiment(text)
            bar.update(1)
        
        if output == 'json':
            click.echo(json.dumps({
                'text': text,
                'sentiment': result.final_sentiment,
                'score': result.final_score,
                'confidence': result.final_confidence,
                'processing_time': getattr(result, 'ollama_time', 0),
                'model_used': model
            }, indent=2))
        
        elif output == 'table':
            click.echo("\nüìä Resultado da An√°lise de Sentimento")
            click.echo("=" * 50)
            click.echo(f"Texto: {text}")
            click.echo(f"Sentimento: {result.final_sentiment.upper()}")
            click.echo(f"Score: {result.final_score:.3f}")
            click.echo(f"Confian√ßa: {result.final_confidence:.3f}")
            click.echo(f"Modelo: {model}")
            click.echo(f"Tempo: {getattr(result, 'ollama_time', 0):.2f}s")
        
        else:  # simple
            sentiment_emoji = {
                'positive': 'üòä',
                'negative': 'üòû',
                'neutral': 'üòê'
            }.get(result.final_sentiment, '‚ùì')
            
            click.echo(f"{sentiment_emoji} {result.final_sentiment.upper()} "
                      f"(score: {result.final_score:.3f}, "
                      f"confian√ßa: {result.final_confidence:.3f})")
    
    except Exception as e:
        click.echo(f"‚ùå Erro na an√°lise: {e}", err=True)
        sys.exit(1)

@sentiment.command()
@click.argument('input_file', type=click.File('r'))
@click.option('--output', '-o', type=click.File('w'), default='-')
@click.option('--format', type=click.Choice(['json', 'csv']), default='json')
@click.option('--model', '-m', help='Modelo Ollama a usar')
@click.pass_context
def batch(ctx, input_file, output, format, model):
    """Analisa sentimento de m√∫ltiplos textos de um arquivo"""
    config = ctx.obj['config']
    model = model or config['ollama_model']
    
    try:
        # Ler textos do arquivo
        texts = [line.strip() for line in input_file if line.strip()]
        
        if not texts:
            click.echo("‚ùå Nenhum texto encontrado no arquivo", err=True)
            sys.exit(1)
        
        click.echo(f"üìù Analisando {len(texts)} textos...")
        
        analyzer = EnhancedSentimentAnalyzer(ollama_model=model)
        
        results = []
        with click.progressbar(texts, label='Processando') as bar:
            for text in bar:
                result = analyzer.analyze_sentiment(text)
                results.append({
                    'text': text,
                    'sentiment': result.final_sentiment,
                    'score': result.final_score,
                    'confidence': result.final_confidence,
                    'processing_time': getattr(result, 'ollama_time', 0)
                })
        
        # Salvar resultados
        if format == 'json':
            json.dump(results, output, indent=2, ensure_ascii=False)
        elif format == 'csv':
            import csv
            writer = csv.DictWriter(output, fieldnames=['text', 'sentiment', 'score', 'confidence', 'processing_time'])
            writer.writeheader()
            writer.writerows(results)
        
        # Estat√≠sticas
        positive_count = sum(1 for r in results if r['sentiment'] == 'positive')
        negative_count = sum(1 for r in results if r['sentiment'] == 'negative')
        neutral_count = sum(1 for r in results if r['sentiment'] == 'neutral')
        avg_confidence = sum(r['confidence'] for r in results) / len(results)
        
        click.echo(f"\nüìä Resumo:")
        click.echo(f"  Positivos: {positive_count} ({positive_count/len(results)*100:.1f}%)")
        click.echo(f"  Negativos: {negative_count} ({negative_count/len(results)*100:.1f}%)")
        click.echo(f"  Neutros: {neutral_count} ({neutral_count/len(results)*100:.1f}%)")
        click.echo(f"  Confian√ßa m√©dia: {avg_confidence:.3f}")
    
    except Exception as e:
        click.echo(f"‚ùå Erro na an√°lise em lote: {e}", err=True)
        sys.exit(1)

@cli.group()
def trading():
    """Comandos para sistema de trading"""
    pass

@trading.command()
@click.option('--days', '-d', default=7, help='N√∫mero de dias para simular')
@click.option('--capital', '-c', default=10000.0, help='Capital inicial')
@click.option('--output', '-o', type=click.File('w'), help='Arquivo para salvar resultados')
@click.option('--model', '-m', help='Modelo Ollama a usar')
@click.pass_context
def backtest(ctx, days, capital, output, model):
    """Executa backtest do sistema de trading"""
    config = ctx.obj['config']
    model = model or config['ollama_model']
    
    try:
        click.echo(f"üß™ Iniciando backtest: {days} dias, ${capital:,.2f} capital inicial")
        
        system = BitcoinTradingSystemWithOllama(
            initial_capital=capital,
            ollama_model=model
        )
        
        with click.progressbar(length=days, label='Executando simula√ß√£o') as bar:
            result = system.run_simulation(days=days, news_frequency=4)
            bar.update(days)
        
        # Exibir resultados
        click.echo(f"\nüìä Resultados do Backtest:")
        click.echo(f"  Capital inicial: ${capital:,.2f}")
        click.echo(f"  Capital final: ${result.final_capital:,.2f}")
        click.echo(f"  Retorno total: {result.total_return:.2f}%")
        click.echo(f"  Sharpe Ratio: {result.sharpe_ratio:.3f}")
        click.echo(f"  Drawdown m√°ximo: {result.max_drawdown:.2f}%")
        click.echo(f"  Taxa de acerto: {result.win_rate:.1f}%")
        click.echo(f"  Total de trades: {result.total_trades}")
        
        # Salvar resultados se especificado
        if output:
            result_data = {
                'backtest_config': {
                    'days': days,
                    'initial_capital': capital,
                    'model': model
                },
                'results': {
                    'final_capital': result.final_capital,
                    'total_return': result.total_return,
                    'sharpe_ratio': result.sharpe_ratio,
                    'max_drawdown': result.max_drawdown,
                    'win_rate': result.win_rate,
                    'total_trades': result.total_trades
                },
                'timestamp': datetime.now().isoformat()
            }
            
            json.dump(result_data, output, indent=2)
            click.echo(f"üíæ Resultados salvos em {output.name}")
    
    except Exception as e:
        click.echo(f"‚ùå Erro no backtest: {e}", err=True)
        sys.exit(1)

@trading.command()
@click.option('--duration', '-d', default=60, help='Dura√ß√£o em minutos')
@click.option('--interval', '-i', default=5, help='Intervalo entre an√°lises (minutos)')
@click.option('--dry-run', is_flag=True, help='Modo simula√ß√£o (n√£o executa trades reais)')
@click.pass_context
def live(ctx, duration, interval, dry_run):
    """Executa sistema de trading em tempo real"""
    config = ctx.obj['config']
    
    if not dry_run:
        click.confirm('‚ö†Ô∏è  Modo de trading real. Continuar?', abort=True)
    
    try:
        click.echo(f"üöÄ Iniciando trading {'(simula√ß√£o)' if dry_run else '(REAL)'}")
        click.echo(f"Dura√ß√£o: {duration} minutos, Intervalo: {interval} minutos")
        
        system = BitcoinTradingSystemWithOllama(
            initial_capital=config['initial_capital'],
            ollama_model=config['ollama_model']
        )
        
        start_time = time.time()
        end_time = start_time + (duration * 60)
        
        while time.time() < end_time:
            try:
                # Simular an√°lise de mercado
                click.echo(f"\nüìä {datetime.now().strftime('%H:%M:%S')} - Analisando mercado...")
                
                # Aqui seria implementada a coleta real de dados
                # Por enquanto, usar dados simulados
                market_data = {
                    'sentiment_text': 'Bitcoin showing strong momentum today',
                    'price': 45000.0,
                    'volume': 1000000
                }
                
                # Gerar sinal de trading
                signal = system.generate_trading_signal(market_data)
                
                click.echo(f"üéØ Sinal: {signal['action']} "
                          f"(confian√ßa: {signal['confidence']:.3f})")
                
                if not dry_run and signal['action'] != 'HOLD':
                    click.echo(f"üíº Executando trade: {signal['action']}")
                    # Aqui seria implementada a execu√ß√£o real do trade
                
                # Aguardar pr√≥ximo intervalo
                time.sleep(interval * 60)
                
            except KeyboardInterrupt:
                click.echo("\n‚èπÔ∏è  Trading interrompido pelo usu√°rio")
                break
            except Exception as e:
                click.echo(f"‚ùå Erro durante trading: {e}", err=True)
                time.sleep(60)  # Aguardar 1 minuto antes de tentar novamente
    
    except Exception as e:
        click.echo(f"‚ùå Erro iniciando trading: {e}", err=True)
        sys.exit(1)

@cli.group()
def benchmark():
    """Comandos para benchmark e testes"""
    pass

@benchmark.command()
@click.option('--models', '-m', multiple=True, help='Modelos para testar')
@click.option('--output', '-o', type=click.File('w'), help='Arquivo para salvar resultados')
@click.pass_context
def models(ctx, models, output):
    """Executa benchmark comparativo de modelos"""
    if not models:
        models = ['llama3.2:1b', 'gemma2:9b', 'deepseek-r1:7b']
    
    try:
        click.echo(f"üß™ Executando benchmark de {len(models)} modelos...")
        
        benchmark = SentimentBenchmark()
        results = {}
        
        for model in models:
            click.echo(f"\nü§ñ Testando modelo: {model}")
            
            try:
                with click.progressbar(length=1, label=f'Benchmark {model}') as bar:
                    result = benchmark.run_model_benchmark(model)
                    bar.update(1)
                
                results[model] = result
                
                click.echo(f"  Acur√°cia: {result['accuracy']:.1f}%")
                click.echo(f"  Tempo m√©dio: {result['avg_time']:.2f}s")
                
            except Exception as e:
                click.echo(f"  ‚ùå Erro testando {model}: {e}")
                results[model] = {'error': str(e)}
        
        # Exibir resumo
        click.echo(f"\nüìä Resumo do Benchmark:")
        click.echo("=" * 50)
        
        for model, result in results.items():
            if 'error' not in result:
                click.echo(f"{model:15} | {result['accuracy']:6.1f}% | {result['avg_time']:6.2f}s")
            else:
                click.echo(f"{model:15} | ERROR: {result['error']}")
        
        # Salvar resultados
        if output:
            benchmark_data = {
                'timestamp': datetime.now().isoformat(),
                'models_tested': list(models),
                'results': results
            }
            json.dump(benchmark_data, output, indent=2)
            click.echo(f"\nüíæ Resultados salvos em {output.name}")
    
    except Exception as e:
        click.echo(f"‚ùå Erro no benchmark: {e}", err=True)
        sys.exit(1)

@cli.group()
def config():
    """Comandos para configura√ß√£o"""
    pass

@config.command()
def show():
    """Exibe configura√ß√£o atual"""
    config = cli_config.load()
    
    click.echo("‚öôÔ∏è  Configura√ß√£o Atual:")
    click.echo("=" * 30)
    
    for key, value in config.items():
        click.echo(f"{key:20}: {value}")

@config.command()
@click.argument('key')
@click.argument('value')
def set(key, value):
    """Define valor de configura√ß√£o"""
    config = cli_config.load()
    
    # Tentar converter valor para tipo apropriado
    try:
        if value.lower() in ['true', 'false']:
            value = value.lower() == 'true'
        elif value.replace('.', '').replace('-', '').isdigit():
            value = float(value) if '.' in value else int(value)
    except:
        pass  # Manter como string
    
    config[key] = value
    cli_config.save(config)
    
    click.echo(f"‚úÖ Configura√ß√£o atualizada: {key} = {value}")

@config.command()
@click.argument('key')
def get(key):
    """Obt√©m valor de configura√ß√£o"""
    config = cli_config.load()
    
    if key in config:
        click.echo(config[key])
    else:
        click.echo(f"‚ùå Chave '{key}' n√£o encontrada", err=True)
        sys.exit(1)

@config.command()
def reset():
    """Restaura configura√ß√£o padr√£o"""
    if click.confirm('‚ö†Ô∏è  Restaurar configura√ß√£o padr√£o?'):
        cli_config.save(cli_config.default_config)
        click.echo("‚úÖ Configura√ß√£o restaurada")

@cli.group()
def system():
    """Comandos para gerenciamento do sistema"""
    pass

@system.command()
def status():
    """Verifica status do sistema"""
    click.echo("üîç Verificando status do sistema...")
    
    # Verificar Ollama
    try:
        import requests
        response = requests.get('http://localhost:11434/api/tags', timeout=5)
        if response.status_code == 200:
            models = response.json().get('models', [])
            click.echo(f"‚úÖ Ollama: Online ({len(models)} modelos)")
        else:
            click.echo(f"‚ùå Ollama: Erro HTTP {response.status_code}")
    except Exception as e:
        click.echo(f"‚ùå Ollama: Offline ({e})")
    
    # Verificar depend√™ncias Python
    try:
        import langchain
        import numpy
        import pandas
        click.echo("‚úÖ Depend√™ncias Python: OK")
    except ImportError as e:
        click.echo(f"‚ùå Depend√™ncias Python: {e}")
    
    # Verificar configura√ß√£o
    config = cli_config.load()
    click.echo(f"‚úÖ Configura√ß√£o: {len(config)} par√¢metros carregados")
    
    # Verificar logs
    if LOG_DIR.exists():
        log_files = list(LOG_DIR.glob('*.log'))
        click.echo(f"üìù Logs: {len(log_files)} arquivos em {LOG_DIR}")
    else:
        click.echo("üìù Logs: Diret√≥rio n√£o encontrado")

@system.command()
@click.option('--lines', '-n', default=50, help='N√∫mero de linhas')
@click.option('--follow', '-f', is_flag=True, help='Acompanhar logs em tempo real')
def logs(lines, follow):
    """Exibe logs do sistema"""
    log_file = LOG_DIR / 'trading.log'
    
    if not log_file.exists():
        click.echo("‚ùå Arquivo de log n√£o encontrado", err=True)
        sys.exit(1)
    
    try:
        if follow:
            click.echo("üìù Acompanhando logs (Ctrl+C para sair)...")
            import subprocess
            subprocess.run(['tail', '-f', str(log_file)])
        else:
            with open(log_file, 'r') as f:
                lines_list = f.readlines()
                for line in lines_list[-lines:]:
                    click.echo(line.rstrip())
    
    except Exception as e:
        click.echo(f"‚ùå Erro lendo logs: {e}", err=True)
        sys.exit(1)

@system.command()
def metrics():
    """Exibe m√©tricas do sistema"""
    try:
        # Obter m√©tricas recentes
        recent_metrics = metrics_collector.get_recent_alerts(hours=24)
        
        click.echo("üìä M√©tricas do Sistema (√∫ltimas 24h):")
        click.echo("=" * 40)
        
        if recent_metrics:
            for metric in recent_metrics[:10]:  # Mostrar √∫ltimas 10
                timestamp = datetime.fromisoformat(metric['timestamp']).strftime('%H:%M:%S')
                click.echo(f"{timestamp} | {metric['severity']:8} | {metric['message']}")
        else:
            click.echo("Nenhuma m√©trica dispon√≠vel")
    
    except Exception as e:
        click.echo(f"‚ùå Erro obtendo m√©tricas: {e}", err=True)

@cli.command()
def version():
    """Exibe informa√ß√µes de vers√£o"""
    click.echo("üöÄ Sistema de Trading Bitcoin com Ollama LLM")
    click.echo("Vers√£o: 1.0")
    click.echo("Autor: Manus AI")
    click.echo("Data: 31 de Julho de 2025")

if __name__ == '__main__':
    cli()

